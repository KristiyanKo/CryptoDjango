
from io import BytesIO
from django.http import HttpResponse
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from .models import Transaction
from matplotlib import pyplot as plt
import os


def generate_transaction_report(user):
    """Generate a PDF report for transactions of a user."""
    transactions = Transaction.objects.filter(wallet__owner=user)

    # Create the PDF
    buffer = BytesIO()
    pdf = canvas.Canvas(buffer, pagesize=letter)
    pdf.drawString(100, 750, f"Transaction Report for {user.username}")
    pdf.drawString(100, 730, "Generated by Crypto Wallet")

    y = 700
    for transaction in transactions:
        line = (
            f"ID: {transaction.id}, Wallet: {transaction.wallet}, "
            f"Amount: {transaction.amount}, Type: {transaction.transaction_type}, "
            f"Date: {transaction.timestamp.strftime('%Y-%m-%d')}"
        )
        pdf.drawString(100, y, line)
        y -= 20
        if y < 50:
            pdf.showPage()
            y = 750

    pdf.showPage()
    pdf.save()

    buffer.seek(0)
    return buffer


def generate_transaction_graph(user):
    """Generate a graph of transaction amounts."""
    transactions = Transaction.objects.filter(wallet__owner=user)
    amounts = [t.amount for t in transactions]
    transaction_ids = [t.id for t in transactions]

    plt.figure(figsize=(10, 5))
    plt.bar(transaction_ids, amounts, color="skyblue")
    plt.title("Transaction Amounts")
    plt.xlabel("Transaction ID")
    plt.ylabel("Amount")

    graph_path = os.path.join("static", "graphs", f"{user.username}_transactions.png")
    os.makedirs(os.path.dirname(graph_path), exist_ok=True)
    plt.savefig(graph_path)
    plt.close()

    return graph_path


def download_transaction_report(request):
    """View to download the transaction report."""
    if not request.user.is_authenticated:
        return HttpResponse("Unauthorized", status=401)

    # Generate report and graph
    pdf_buffer = generate_transaction_report(request.user)
    graph_path = generate_transaction_graph(request.user)

    # Send PDF as response
    response = HttpResponse(pdf_buffer, content_type="application/pdf")
    response["Content-Disposition"] = f"inline; filename={request.user.username}_transaction_report.pdf"
    return response
